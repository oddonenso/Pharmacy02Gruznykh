// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pharmacy.Data;

#nullable disable

namespace Pharmacy.Migrations
{
    [DbContext(typeof(Connection))]
    partial class ConnectionModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pharmacy.Data.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("DeliveryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeliveryID"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("DeliveryDate");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.Property<int>("PickupRequestID")
                        .HasColumnType("integer")
                        .HasColumnName("PickupRequestID");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<int>("SupplierID")
                        .HasColumnType("integer")
                        .HasColumnName("SupplierID");

                    b.HasKey("DeliveryID");

                    b.HasIndex("PickupRequestID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Pharmacy.Data.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GenderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenderID"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("GenderName");

                    b.HasKey("GenderID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Pharmacy.Data.PickupRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RequestID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestID"));

                    b.Property<int>("ProductID")
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RequestDate");

                    b.Property<int>("RequesterID")
                        .HasColumnType("integer")
                        .HasColumnName("RequesterID");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("integer")
                        .HasColumnName("WarehouseID");

                    b.HasKey("RequestID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RequesterID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("PickupRequests");
                });

            modelBuilder.Entity("Pharmacy.Data.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Certificate");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Manufacturer");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<DateTime>("ShelfLife")
                        .HasColumnType("date")
                        .HasColumnName("ShelfLife");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("integer")
                        .HasColumnName("WarehouseID");

                    b.HasKey("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Pharmacy.Data.QualityControl", b =>
                {
                    b.Property<int>("IdControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("IdControl");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdControl"));

                    b.Property<DateTime>("DataControl")
                        .HasColumnType("date")
                        .HasColumnName("DataControl");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    b.Property<string>("ResultControl")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ResultControl");

                    b.HasKey("IdControl");

                    b.HasIndex("ProductID");

                    b.ToTable("QualityControl");
                });

            modelBuilder.Entity("Pharmacy.Data.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("RoleID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Pharmacy.Data.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SaleID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SaleID"));

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10, 2)")
                        .HasColumnName("Price");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("date")
                        .HasColumnName("SaleDate");

                    b.HasKey("SaleID");

                    b.HasIndex("ProductID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Pharmacy.Data.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplierID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Pharmacy.Data.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Email");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer")
                        .HasColumnName("GenderID");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(65535)")
                        .HasColumnName("Password");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Patronymic");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer")
                        .HasColumnName("RoleID");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Surname");

                    b.HasKey("UserID");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pharmacy.Data.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("WarehouseID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Address");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.Property<int>("QuantityOfGoods")
                        .HasColumnType("integer")
                        .HasColumnName("QuantityOfGoods");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("WarehouseName");

                    b.HasKey("WarehouseID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Pharmacy.Data.Delivery", b =>
                {
                    b.HasOne("Pharmacy.Data.PickupRequest", "PickupRequest")
                        .WithMany()
                        .HasForeignKey("PickupRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Data.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickupRequest");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Pharmacy.Data.PickupRequest", b =>
                {
                    b.HasOne("Pharmacy.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Data.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Data.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Requester");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pharmacy.Data.Product", b =>
                {
                    b.HasOne("Pharmacy.Data.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pharmacy.Data.QualityControl", b =>
                {
                    b.HasOne("Pharmacy.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pharmacy.Data.Sale", b =>
                {
                    b.HasOne("Pharmacy.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pharmacy.Data.User", b =>
                {
                    b.HasOne("Pharmacy.Data.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
